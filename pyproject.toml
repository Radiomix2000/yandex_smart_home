[tool.poetry]
name = "yandex_smart_home"
package-mode = false

[tool.poetry.dependencies]
python = ">=3.12,<3.13"

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
ruff = "^0.7.0"
isort = "^5.13.2"
black = "^24.10.0"

[tool.poetry.group.test.dependencies]
mypy-dev = "1.13.0a1"
pytest-homeassistant-custom-component = "0.13.181"
home-assistant-intents = "*"
hassil = "*"
mutagen = "*"
ha-ffmpeg = "*"
pymicro-vad = "*"
pyspeex-noise = "*"

[tool.poetry.group.tox.dependencies]
tox = "4.23.2"
tox-uv = "1.16.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "1.5.3"
mkdocs-material = "9.5.3"
mkdocs-material-extensions = "1.3.1"
mike = "2.1.3"

[tool.poetry.group.homeassistant.dependencies]
homeassistant = "2024.11.0"
colorlog = "*"
numpy = "*"

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120

[tool.ruff.per-file-ignores]
"tests/test_schema.py" = ["F403", "F405"]

[tool.isort]
profile = "black"
line_length = 120
force_sort_within_sections = true
combine_as_imports = true
known_first_party = [
    "custom_components.yandex_smart_home",
    "tests",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "-p no:aiohttp"
verbosity_assertions = 2
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.report]
exclude_also = [
    "raise NotImplementedError",
    "@abstractmethod",
    "if TYPE_CHECKING:",
]
omit = ["tests/*"]

[tool.mypy]
python_version = "3.12"
plugins = ["pydantic.mypy"]
follow_imports_for_stubs = true
local_partial_types = true
strict_equality = true
no_implicit_optional = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
enable_error_code = [
    "ignore-without-code",
    "redundant-self",
    "truthy-iterable",
]
extra_checks = false
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
warn_return_any = true
warn_unreachable = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = "tests"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.conftest"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_capability"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_capability_color"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_capability_custom"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_capability_mode"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_capability_onoff"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_capability_range"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_capability_toggle"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_capability_video"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_cloud"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_cloud_stream"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_config_validation"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_device"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_diagnostics"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_entry_data"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_handlers"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_helpers"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_init"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_notifier"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_schema"
ignore_errors = true

[tool.tox]
env_list = [
    "type",
    "2024_4",
    "2024_5",
    "2024_6",
    "2024_7",
    "2024_8",
    "2024_9",
    "2024_10",
    "2024_11",
]
skipsdist = true

[tool.tox.env_run_base]
description = "Run test under {env_python}"
base_python = ["py312"]
commands = [
    ["pytest", "--cov", "--cov-report=xml:{env_dir}/coverage.xml", "-n=auto"],
]

[tool.tox.env_run_base.setenv]
PATH = "{env_dir}/bin:/usr/bin:/bin"
PYTHONPATH = "{tox_root}"
PYTHONDONTWRITEBYTECODE = "1"
MYPY_CACHE_DIR = "{env_dir}/.cache/mypy"
UV_EXTRA_INDEX_URL = "https://packagecloud.io/dext0r/pypi/pypi/simple"

[tool.tox.env.2024_4]
deps = [
    "pytest-homeassistant-custom-component==0.13.112",
    "home_assistant_intents==2024.2.2",
    "hassil==1.5.1",
]

[tool.tox.env.2024_5]
deps = [
    "pytest-homeassistant-custom-component==0.13.121",
    "home_assistant_intents==2024.4.24",
    "hassil==1.7.0",
    "mutagen==1.47.0",
    "ha-ffmpeg==3.2.0",
]

[tool.tox.env.2024_6]
deps = [
    "pytest-homeassistant-custom-component==0.13.132",
    "home_assistant_intents==2024.4.24",
    "hassil==1.7.0",
    "mutagen==1.47.0",
    "ha-ffmpeg==3.2.0",
]

[tool.tox.env.2024_7]
deps = [
    "pytest-homeassistant-custom-component==0.13.144",
    "home_assistant_intents==2024.4.24",
    "hassil==1.7.0",
    "mutagen==1.47.0",
    "ha-ffmpeg==3.2.0",
]

[tool.tox.env.2024_8]
deps = [
    "pytest-homeassistant-custom-component==0.13.152",
    "home_assistant_intents==2024.4.24",
    "hassil==1.7.0",
    "mutagen==1.47.0",
    "ha-ffmpeg==3.2.0",
    "pymicro-vad==1.0.2",
]

[tool.tox.env.2024_9]
deps = [
    "pytest-homeassistant-custom-component==0.13.161",
    "home_assistant_intents==2024.4.24",
    "hassil==1.7.0",
    "mutagen==1.47.0",
    "ha-ffmpeg==3.2.0",
    "pymicro-vad==1.0.2",
    "pyspeex_noise==1.0.2",
]

[tool.tox.env.2024_10]
deps = [
    "pytest-homeassistant-custom-component==0.13.171",
    "home_assistant_intents==2024.4.24",
    "hassil==1.7.0",
    "mutagen==1.47.0",
    "ha-ffmpeg==3.2.0",
    "pymicro-vad==1.0.2",
    "pyspeex_noise==1.0.2",
]

[tool.tox.env.2024_11]
deps = [
    "pytest-homeassistant-custom-component==0.13.181",
    "home_assistant_intents==2024.4.24",
    "hassil==1.7.0",
    "mutagen==1.47.0",
    "ha-ffmpeg==3.2.0",
    "pymicro-vad==1.0.2",
    "pyspeex_noise==1.0.2",
]

[tool.tox.env.type]
description = "Run type checks under {env_python}"
# https://github.com/python/mypy/issues/8545
commands_pre = [
    ["python", "-c", "from pathlib import Path; import pytest_homeassistant_custom_component; (Path(pytest_homeassistant_custom_component.__file__).parent / Path(\"py.typed\")).touch()"],
]
commands = [
    ["mypy", "."],
]
deps = [
    { replace = "ref", of = ["tool", "tox", "env", "2024_11", "deps"], extend = true },
    "mypy-dev==1.13.0a1",
]
